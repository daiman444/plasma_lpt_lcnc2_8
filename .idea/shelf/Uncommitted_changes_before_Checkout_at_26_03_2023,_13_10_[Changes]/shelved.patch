Index: GUI/THC_TAB.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python2\n# -*- coding:UTF-8 -*-\n\nimport sys\nimport os\nimport hal_glib  # needed to make our own hal pins\nimport hal  # needed to make our own hal pins\nimport gtk\nimport linuxcnc\n\nfrom gladevcp.persistence import IniFile  # we use this one to save the states of the widgets on shut down and restart\nfrom gladevcp.persistence import widget_defaults\nfrom gladevcp.persistence import select_widgets\nfrom gmoccapy import preferences\nfrom gmoccapy import getiniinfo\n\nGSTAT = hal_glib.GStat()\nSTATUS = linuxcnc.stat()\nCOMMANDS = linuxcnc.command()\nINIPATH = os.environ.get('INI_FILE_NAME', '/dev/null')\n\n\nclass PlasmaClass:\n    def __init__(self, halcomp, builder, useropts):\n        self.hglib = hal_glib\n        self.lcnc = linuxcnc\n        self.command = linuxcnc.command()\n        self.stat = linuxcnc.stat()\n        self.inifile = self.lcnc.ini(INIPATH)\n        self.builder = builder\n        self.halcomp = halcomp\n        GSTAT.connect('all-homed', lambda w: self.check_state('homed'))\n        self.defaults = {IniFile.vars: {\"pierce_hghtval\": 7.0,\n                                        \"pierce_hghtmax\": 15.0,\n                                        \"pierce_hghtmin\": 1.0,\n                                        \"pierce_hghtincr\": 0.5,\n                                        \"jump_hghtval\": 0.0,\n                                        \"jump_hghtmax\": 15.0,\n                                        \"jump_hghtmin\": 0.0,\n                                        \"jump_hghtincr\": 0.5,\n                                        \"cut_hghtval\": 9.0,\n                                        \"cut_hghtmax\": 15.0,\n                                        \"cut_hghtmin\": 0.0,\n                                        \"cut_hghtincr\": 0.5,\n                                        \"pierce_delval\": 0.0,\n                                        \"pierce_delmax\": 5.0,\n                                        \"pierce_delmin\": 0.0,\n                                        \"pierce_delincr\": 0.1,\n                                        \"safe_zval\": 30.0,\n                                        \"safe_zmax\": 100.0,\n                                        \"safe_zmin\": 0.0,\n                                        \"safe_zincr\": 5.0,\n                                        \"z_speedval\": 750.0,\n                                        \"z_speedmax\": 1000.0,\n                                        \"z_speedmin\": 100.0,\n                                        \"z_speedincr\": 50.0,\n                                        \"stop_delval\": 13.0,\n                                        \"stop_delmax\": 20.0,\n                                        \"stop_delmin\": 0.0,\n                                        \"stop_delincr\": 1.0,\n                                        \"cor_velval\": 20.0,\n                                        \"cor_velmax\": 100.0,\n                                        \"cor_velmin\": 0.0,\n                                        \"cor_velincr\": 5.0,\n                                        \"vel_tolval\": 90.0,\n                                        \"vel_tolmax\": 100.0,\n                                        \"vel_tolmin\": 0.0,\n                                        \"vel_tolincr\": 5.0,\n                                        \"feed_directval\": 1,\n                                        \"feed_directmax\": 1,\n                                        \"feed_directmin\": -1,\n                                        \"feed_directincr\": 1,\n                                        \"volts_reqval\": 125,\n                                        \"volts_reqmax\": 130,\n                                        \"volts_reqmin\": 120,\n                                        \"volts_reqincr\": 1,\n                                        },\n                         IniFile.widgets: widget_defaults(select_widgets([self.builder.get_object(\"hal-btn-THC\")],\n                                                                         hal_only=True, output_only=True)),\n                         }\n        get_ini_info = getiniinfo.GetIniInfo()\n        prefs = preferences.preferences(get_ini_info.get_preference_file_path())\n        theme_name = prefs.getpref(\"gtk_theme\", \"Follow System Theme\", str)\n        if theme_name == \"Follow System Theme\":\n            theme_name = gtk.settings_get_default().get_property(\"gtk-theme-name\")\n        gtk.settings_get_default().set_string_property(\"gtk-theme-name\", theme_name, \"\")\n        self.ini_filename = __name__ + \".var\"\n        self.ini = IniFile(self.ini_filename, self.defaults, self.builder)\n        self.ini.restore_state(self)\n\n        self.list_btns_set_coord = ['gotozero', 'zero-xyz', 'zero-x', 'zero-y', 'zero-z', 'gotoend', 'set_coord',\n                                  'btn_feed_minus', 'btn_feed_plus']\n\n# TODO\n# нужно структурировать виджеты по их функционалу для распределения когда какие должны быть активны\n\n        for name in self.list_btns_set_coord:\n            self.builder.get_object(name).set_sensitive(False)\n\n        # pins in\n\n        # pins out\n\n        # labels\n        self.lbl_print = self.builder.get_object('lbl_print')\n\n        # buttons\n        self.builder.get_object('gotozero').connect('pressed', self.go_to_zero, 'G90 G0 Z30 X0 Y0 F800')\n        self.builder.get_object('zero-xyz').connect('pressed', self.go_to_zero, 'G92 X0 Y0 Z0')\n        self.builder.get_object('zero-x').connect('pressed', self.go_to_zero, 'G92 X0')\n        self.builder.get_object('zero-y').connect('pressed', self.go_to_zero, 'G92 Y0')\n        self.builder.get_object('zero-z').connect('pressed', self.go_to_zero, 'G92 Z0')\n        self.builder.get_object('gotoend').connect('pressed', self.gotoend)\n        self.builder.get_object('set_coord').connect('pressed', self.setcoord)\n\n    def check_state(self, state):\n        if state:\n            for name in self.list_btns_set_coord:\n                self.builder.get_object(name).set_sensitive(True)\n\n\n\n\n    def go_to_zero(self, w, d=None):\n        self.command.mode(linuxcnc.MODE_MDI)\n        self.command.mdi(d)\n        self.command.wait_complete()\n        self.command.mode(linuxcnc.MODE_MANUAL)\n\n    def gotoend(self, w, d=None):\n        x_limit = self.inifile.find('AXIS_X', 'MIN_LIMIT')\n        y_limit = self.inifile.find('AXIS_Y', 'MAX_LIMIT')\n        self.command.mode(linuxcnc.MODE_MDI)\n        self.command.mdi('G53 G00 Z0 ')\n        self.command.wait_complete()\n        self.command.mdi('G53 X{0} Y{1}'.format(x_limit, y_limit))\n        self.command.wait_complete()\n        self.command.mode(linuxcnc.MODE_MANUAL)\n\n\n    def setcoord(self, w, d=None):\n        x_coord = self.builder.get_object('txt_set_coord_x').get_text()\n        y_coord = self.builder.get_object('txt_set_coord_y').get_text()\n        self.command.mode(linuxcnc.MODE_MDI)\n        self.command.mdi('G92 X{0} Y{1}'.format(float(x_coord), float(y_coord)))\n        self.command.wait_complete()\n        self.command.mode(linuxcnc.MODE_MANUAL)\n\n\n\ndef get_handlers(halcomp, builder, useropts):\n    return [PlasmaClass(halcomp, builder, useropts)]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/THC_TAB.py b/GUI/THC_TAB.py
--- a/GUI/THC_TAB.py	(revision ad1dbe4b3259e1ccf554b5000c24180c66f1b724)
+++ b/GUI/THC_TAB.py	(date 1679814619926)
@@ -30,6 +30,7 @@
         self.builder = builder
         self.halcomp = halcomp
         GSTAT.connect('all-homed', lambda w: self.check_state('homed'))
+        self.check_state = False
         self.defaults = {IniFile.vars: {"pierce_hghtval": 7.0,
                                         "pierce_hghtmax": 15.0,
                                         "pierce_hghtmin": 1.0,
@@ -102,7 +103,7 @@
         # pins out
 
         # labels
-        self.lbl_print = self.builder.get_object('lbl_print')
+        self.builder.get_object('lbl_print').set_label(str(self.stat.task_mode))
 
         # buttons
         self.builder.get_object('gotozero').connect('pressed', self.go_to_zero, 'G90 G0 Z30 X0 Y0 F800')
